import {GoogleGenerativeAI} from "@google/generative-ai";

//Replace with API key
const gemini = new GoogleGenerativeAI("API KEY")

// Cache to store quotes for different sources

const quoteCache: Record<string,{quotes: string[], timestamp: number}> = {}

export async function getQuotes(source:string):Promise<string[]> {
    const now = Date.now();
    const sixHours = 6 * 60*60*1000; //6 hours in milliseconds

    //check if we have cachec quotes and they are still valid
    if (quoteCache[source] && now - quoteCache[source].timestamp < sixHours) {
        return quoteCache[source].quotes;
    }

    try {
        const prompt = `you are a ${source} leader. Provide 20 encouraging quotes from what you consider as your bible.
                        Each quote should follow this format: "Quote Text - Source".
                        Ensure each quote does NOT include any numbering. Ensure they are unique and meaningful`;
        const model = gemini.getGenerativeModel({model: "gemini-1.5-flash"})
        const response = await model.generateContent(prompt);

        if (response && response.response) {
            const generatedText = response.response.text();
            if (generatedText) {
                //split by newline, remove empty lines, and limit to 20 quotes
                let quotes: string[] = generatedText.split("\n")
                    .map(line => line.trim())
                    .filter(line => line !== "")
                    .slice(0, 20); // Ensure only 20 quotes

                //cache results
                quoteCache[source] = {quotes, timestamp:now};
                return quotes;
            }
        }
        console.error("No quotes generated by gemini: ", response);
        return [];
    }catch(error){
        console.error("Error generating quotes:", error);
    }
    return []
}

//export default getQuotes;